import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Vicky Weng
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String title = "";
        if (channel.child(getChildElement(channel, "title")).child(0) != null) {
            title = channel.child(getChildElement(channel, "title")).child(0)
                    .label();
        } else {
            title = "Empty Title";
        }
        out.println("<html> <head> <title>" + title + "</title>");
        out.println("</head> <body>");

        String link = channel.child(getChildElement(channel, "link")).child(0)
                .label();
        out.println("<h1>" + "<a href=\"" + link + "\">" + title + "</a>"
                + "</h1>");
        out.println("<p>");
        if (channel.child(getChildElement(channel, "description"))
                .child(0) != null) {
            out.println(channel.child(getChildElement(channel, "description"))
                    .child(0).label());
        } else {
            out.println("No description");
        }
        out.println("</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("   </table>");
        out.println("</body></html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int index = -1;
        boolean notFound = true;
        for (int i = 0; i < xml.numberOfChildren() && notFound; i++) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                index = i;
                notFound = false;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        if ((getChildElement(item, "title") != -1)
                || (getChildElement(item, "description") != -1)) {

            out.println("<tr>");
            if (getChildElement(item, "pubDate") != -1) {
                out.println(
                        "<td>" + item.child(getChildElement(item, "pubDate"))
                                .child(0).label() + "</td>");
            } else {
                out.println("<td>" + "No date available" + "</td>");
            }

            if (getChildElement(item, "source") != -1) {
                String url = item.child(getChildElement(item, "source"))
                        .attributeValue("url");
                out.println("<td>" + " <a href=\"" + url + "\">" + item
                        .child(getChildElement(item, "source")).child(0).label()
                        + "</a>" + "</td>");
            } else {
                out.println("<td>" + "No source available" + "</td>");
            }

            if ((getChildElement(item, "title") != -1)
                    && (item.child(getChildElement(item, "title"))
                            .numberOfChildren() != 0)) {
                String title = item.child(getChildElement(item, "title"))
                        .child(0).label();

                //If the title is present and not empty
                if (getChildElement(item, "link") != -1) {

                    String link = item.child(getChildElement(item, "link"))
                            .child(0).label();
                    out.println("<td>" + "<a href=\"" + link + "\">" + title
                            + "</a>" + "</td>");
                } else {
                    out.println("<td>" + title + "</td>");
                }
            } else if (item.child((getChildElement(item, "description")))
                    .numberOfChildren() != 0) {
                String description = item
                        .child(getChildElement(item, "description")).child(0)
                        .label();

                //Or the description, if not empty
                if (getChildElement(item, "link") != -1) {
                    String link = item.child(getChildElement(item, "link"))
                            .child(0).label();
                    out.println("<td>" + "<a href=\"" + link + "\">"
                            + description + "</a>" + "</td>");
                } else {
                    out.println("<td>" + description + "</td>");
                }
            } else {

                //or "No title available"
                if (getChildElement(item, "link") != -1) {
                    String link = item.child(getChildElement(item, "link"))
                            .child(0).label();
                    out.println("<td>" + "<a href=\"" + link + "\">"
                            + "No title available" + "</a>" + "</td>");
                } else {
                    out.println("<td>" + "No title available" + "</td>");
                }
            }
            out.println("</tr>");
        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the URL of an RSS 2.0 news feed: ");
        String url = in.nextLine();
        out.print(
                "Enter the the name of an output file including the .html extension: ");
        String name = in.nextLine();
        SimpleWriter out1 = new SimpleWriter1L(name);
        XMLTree xml = new XMLTree1(url);

        if (xml.label().equals("rss")) {
            XMLTree channel = xml.child(0);
            outputHeader(channel, out1);
            for (int i = 0; (i < channel.numberOfChildren()); i++) {
                if (channel.child(i).label().equals("item")
                        && channel.child(i).isTag()) {
                    XMLTree item = channel.child(i);
                    processItem(item, out1);
                }
            }
            outputFooter(out1);
        }

        out1.close();
        in.close();
        out.close();
    }

}
